Declaration ->
	vector<int>v={values};

Iterator ->
	vector<int> ::iterator it=v.begin();
	for(it,it!=v.end();it++) cout<<(*it)<<endl;

it++ and it+1 are different
	it++ moves to next value
	it+1 moves to next address
	wont affect in vectors because vector in contigous but in maps this wont work


	for(auto it=V.begin();it!=V.end();it++)
      		cout<<(*it)<<endl;

	advance(itr,3) moves it till it reaches 3


auto keyword automatically given data type,,, can even work on pairs too
	for(auto x:v)
		cout<<x<<" ";


if(v.empty())
	cout<<"VECTOR IS EMPTY";
	
	v.empty()  -> 0 when not empty & 1 when the vector is empty

v.clear();

v.insert(v.begin() + 5 ,88);	// index 5 (starts with 0)
v.erase(v.begin()+5);		// index 5
v.pop_back();			// last element gets removed
v.emplace_back(5);		// adds at last position ; better than push_back

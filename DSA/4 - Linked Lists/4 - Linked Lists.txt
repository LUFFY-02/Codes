Linked list is linear data structure but unlike array it do not need to be in contigous
memory locations which makes it easy to insert/delete values 
No need to pre-allocate the space for linked lists

--------------------------------------------------------------------------------------------------------
CREATING LINKED LIST USING STRUCT

struct Node
{
   int data;
   Node *next;
   Node(int x)
   {
      data=x;
      next=NULL;
   }
};

signed main()
{
   Node *head=new Node(10);
   Node *temp1=new Node(20);
   Node *temp2=new Node(30);
   head->next=temp1;
   temp1->next=temp2;
}
or
   Node *head=new Node(10);
   head->next=new Node(20);
   head->next->next=new Node(30);


--------------------------------------------------------------------------------------------------------

PRINTING VALUES OF LINKED LIST

void print_list(Node *head)
{
   Node *curr=head;
   while(curr!=NULL)
   {
      cout<<curr->data<<" ";
      curr=curr->next;
   }
}

--------------------------------------------------------------------------------------------------------

INSERT NEW NODE AT THE BEGINNING

Node *insert_beginning(Node *head,int x)
{
   Node *temp=new Node(x);
   temp->next=head;
   return temp;
}
signed main()
{
   io_file();
   Node *head=new Node(40);
   head=insert_beginning(head,30);
   head=insert_beginning(head,20);
   head=insert_beginning(head,10);
   print_list(head);
}

--------------------------------------------------------------------------------------------------------

INSERT NEW NODE AT THE END

Node *insert_end(Node *head,int x)
{
   Node *temp=new Node(x);
   Node *curr=head;
   while(curr->next!=NULL)
   {
      curr=curr->next;
   }
   curr->next=temp;
   return head;
}

--------------------------------------------------------------------------------------------------------

DELETE HEAD OF SINGLY LINKED LIST

Node *delete_first(Node *head)
{
   Node *temp=head->next;
   delete head;
   return temp;
}

--------------------------------------------------------------------------------------------------------
DELETE LAST OF SINGLY LINKED LIST

Node *delete_last(Node *head)
{
   if(head==NULL) return NULL;
   if(head->next==NULL)
   {
      delete head;
      return NULL;
   }
   Node *curr=head;
   while(curr->next->next!=NULL)
   {
      curr=curr->next;
   }
   delete curr->next;
   curr->next=NULL;
   return head;
}

--------------------------------------------------------------------------------------------------------
INSERT NEW NODE AT A PARTICULAR POSITION

Node *insert_pos(Node *head,int pos,int val)
{
   Node *temp=new Node(val);
   if(pos==1)
   {
      temp->next=head;
      return temp;
   }
   Node *curr=head;
   for(int i=1;i<pos-1 && curr!=NULL;i++)
   {
      curr=curr->next;
   }
   temp->next=curr->next;
   curr->next=temp;
   return head;
}

--------------------------------------------------------------------------------------------------------
SEARCH ANY NODE IN SINGLY LINKED LIST

void search(Node *head,int val)
{
   Node *curr=head;
   int k=1;
   while(curr!=NULL)
   {
      if(curr->data==val)
         {cout<<k;return;}
      k++;
      curr=curr->next;
   }
}

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

DOUBLY LINKED LISTS ::::::::::::::::::

More efficient 
Less time complexity compared to singly linked lists
but complex to implement

					DECLARATION

struct Node{
   int data;
   Node *next;
   Node *prev;
   Node(int x)
   {
      data=x;
      next=NULL;
      prev=NULL;
   }
};

					PRINT DOUBLY LINKED LIST

void print_list(Node *head)
{
   Node *curr=head;
   while(curr!=NULL)
   {
      cout<<curr->data<<" ";
      curr=curr->next;
   }
}

					INSERT NODE AT THE BEGINNING

Node *insert_beginning(Node *head,int val)
{
   Node *temp=new Node(val);
   temp->next=head;
   if(head!=NULL){head->prev=temp;}
   return temp;
}

					INSERT NODE AT THE END 

Node *insert_end(Node *head,int val)
{
   Node *temp=new Node(val);
   Node *curr=head;
   if(head==NULL)
      return temp;
   while(curr->next!=NULL)
   {
      curr=curr->next;
   }
   curr->next=temp;
   temp->prev=curr;
   return head;
}

					REVERSE A DOUBLY LINKED LIST

Node *reverse(Node *head)
{
   if(head==NULL)
      return NULL;
   if(head->next==NULL)
      return head;
   Node *curr=head;
   while(curr->next!=NULL)
   {
      swap(curr->next,curr->prev);
      curr=curr->prev;
   }
   swap(curr->next,curr->prev);
   return curr;
}

					DELETE THE HEAD OF THE LIST

Node *delete_head(Node *head)
{
   if(head==NULL) return NULL;
   if(head->next==NULL) {delete head;return NULL;}
   Node *curr=head->next;
   delete head;
   head->next=NULL;
   curr->prev=NULL;
   return curr;
}

					DELETE LAST NODE OF THE LIST

Node *delete_last(Node *head)
{
   if(head==NULL) return NULL;
   if(head->next==NULL) {delete head;return NULL;}
   Node *curr=head;
   while(curr->next!=NULL)
      curr=curr->next;
   curr->prev->next=NULL;
   curr->prev=NULL;
   delete curr;
   return head;
}

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

CIRCULAR LINKED LIST :::::::::::::::

Insert delete in O(1) time
Single linked list but no nodes are null , head connected to the tail

--------------------------------------------------------------------------------------------------------
